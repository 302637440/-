1. 概念复习
1.1 功能:从应用程序角度出发,软件具有哪些功能.
1.2 业务:完成功能时的逻辑.对应Service 中一个方法
1.3 事务:从数据库角度出发,完成业务时需要执行的SQL 集合,统
称一个事务.
1.3.1 事务回滚.如果在一个事务中某个SQL 执行事务,希望回
归到事务的原点,保证数据库数据的完整性.
2. 在mybatis 中默认是关闭了JDBC 的自动提交功能
2.1 每一个SqlSession 默认都是不自动提交事务.
2.2 session.commit()提交事务.
2.3 openSession(true);自动提交.setAutoCommit(true);
3. mybatis 底层是对JDBC 的封装.
3.1 JDBC 中executeUpdate()执行新增,删除,修改的SQL.返回值int,
表示受影响的行数.
3.2 mybatis 中<insert> <delete> <update>标签没有resultType 属性,
认为返回值都是int
4. 在openSession() 时Mybatis 会创建SqlSession 时同时创建一个
Transaction(事务对象),同时autoCommit 都为false
4.1 如果出现异常,应该session.rollback()回滚事务.
5. 实现新增的步骤
5.1 在mapper.xml 中提供<insert>标签,标签没有返回值类型
<insert id="ins" parameterType="People">
insert into people values(default,#{name},#{age})
</insert>
5.2 通过session.insert()调用新增方法
int index1 = session.insert("a.b.ins", p);
if(index1>0){
System.out.println("成功");
}else{
System.out.println("失败");
}
八.MyBatis 实现修改
1. 在mapper.xml 中提供<update>标签
<update id="upd" parameterType="People">
update people set name = #{name} where id = #{id}
</update>
2. 编写代码
People peo = new People();
peo.setId(3);
peo.setName("王五");
int index = session.update("a.b.upd", peo);
if(index>0){
System.out.println("成功");
}else{
System.out.println("失败");
}
session.commit();
九.mybatis 实现删除
1. 在mapper.xml 提供<delete>标签
<delete id="del" parameterType="int">
delete from people where id = #{0}
</delete>
2. 编写代码
int del = session.delete("a.b.del",3);
if(del>0){
System.out.println("成功");
}else{
System.out.println("失败");
}
session.commit();